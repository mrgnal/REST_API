name: Deploy to AWS

#on:
#  workflow_run:
#    workflows: ["Format Code"]
#    types:
#      - completed

on:
  push:
    branches:
      - main

env:
    AWS_REGION: eu-north-1
    ECR_REPO: practice-image-repository

jobs:
    deploy:
        name: Create & Deploy Image
        runs-on: ubuntu-latest

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Set up AWS CLI
              uses: aws-actions/configure-aws-credentials@v2
              with:
                aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                aws-region: ${{ env.AWS_REGION }}

            - name: Login to Amazon ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v1

            - name: Build, tag, and push image to Amazon ECR
              id: build-image
              env:
                ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
              run: |
                docker build -t $ECR_REGISTRY/$ECR_REPO:latest .
                docker push $ECR_REGISTRY/$ECR_REPO:latest
                echo "image=$ECR_REGISTRY/$ECR_REPO:latest" >> $GITHUB_OUTPUT

            - name: Get current task definition
              id: get-task-def
              run: |
                aws ecs describe-task-definition \
                  --task-definition ${{ secrets.ECS_TASK_FAMILY }} \
                  --query taskDefinition \
                  --output json > task-definition.json

            - name: Fill in the new image ID in the Amazon ECS task definition
              id: change-task-def
              uses: aws-actions/amazon-ecs-render-task-definition@v1
              with:
                task-definition: task-definition.json
                container-name: my-app
                image: ${{ steps.build-image.outputs.image }}

            - name: Deploy Amazon ECS task definition
              uses: aws-actions/amazon-ecs-deploy-task-definition@v1
              with:
                task-definition: task-definition.json
                cluster: ${{ secrets.ECS_CLUSTER_NAME }}
                service: ${{ secrets.ECS_SERVICE_NAME }}
                wait-for-service-stability: true
